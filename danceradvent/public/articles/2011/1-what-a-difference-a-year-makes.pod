=head1 Looking back on 2011

Firstly, a big welcome to the 2011 Dancer advent calendar - last year's advent
calendar was successful and well-received, hopefully this year's will be even
better.  You can look forward to a series of posts on getting the most from
Dancer and what's happened in 2011.

So, let's start by taking a look back on 2011 and see what's new in the Dancer
world.

=head2 Dancer workshop at LPW2011

Andrew Solomon presented a hands-on training session at this year's London Perl
Workshop entitled "Web development for beginners with Dancer".

The workshop was popular and well received, with 20 registered attendees.

A full writeup will follow later in the calendar :)

=head2 Dancer ecosystem better than ever

Currently, the Dancer repository on GitHub has 378 watchers and has been forked
116 times!

The number of individual contributors according to GitHub is 70 - great to see
such a vibrant and helpful community springing up around Dancer.  Speaking of
the community, our L<IRC channel|http://www.perldancer.org/irc> has 87 people
present at the time of writing, with many helpful volunteers providing valuable
assistance.

More and more Dancer-powered sites are being added to the
L<Dancefloor (Websites using Dancer)|http://www.perldancer.org/dancefloor> page.


=head2 Many more plugins to make life easy

Many more valuable and useful plugins have been released - a search on MetaCPAN
for L<Dancer::Plugin::|https://metacpan.org/search?q=Dancer%3A%3APlugin> gives
73 results.

Later advent calendar posts will showcase some of the useful plugins which can
make your life easier :)


=head2 Better Unicode support - it should Just Work

Unicode support has been extended and corrected, with some helpful guidance from
Mike Whitaker (Penfold).  With C<charset: UTF-8> in your application's config,
using Unicode should Just Work.  If you're using L<Dancer::Plugin::Database>,
that setting will also cause UTF-8 support in your database engine to be
automatically enabled (for MySQL, Postgres or SQLite), so unicode strings
fetched from the database should need no special handling.

=head2 Support for HTTP PATCH

The HTTP 'PATCH' verb is defined in
L<RFC 5789|http://tools.ietf.org/html/rfc5789>, allowing clients to perform a
partial resource modification, and is slowly being adopted by RESTful APIs etc -
GitHub's V3 API being one such example.

Dancer now supports PATCH requests.

One caveat is that it won't work in standalone mode until
L<HTTP::Server::Simple>
has been updated to recognise PATCH requests.  A pull request addressing this
has been submitted, but, at the time of writing, has not been merged:

L<https://github.com/bestpractical/http-server-simple/pull/2>

=head2 Get hooked!

Support for hooks, both defined by Dancer itself and additional hooks registered
by your app or plugins, to make it possible to customise how Dancer behaves
easily.

=head2 Configurable XML serialising

Options can now be passed to control serialisation to XML via  L<XML::Simple>.

=head2 send_file can send data from a scalar and set filename

The L<send_file|http://p3rl.org/Dancer#send_file> keyword can now be used to
send data from a scalar and set the Content-Disposition header to suggest a
filename, for example:

    send_file \$img_data, { filename => 'myimage.png' };

=head2 send_file supports streaming

The L<send_file|http://p3rl.org/Dancer#send_file> keyword now supports PSGI
streaming, with callbacks to control what happens.

=head2 Exceptions

The exceptional Damien Krotkine has added a continuations-style exceptions system
to provide much more powerful error handling.

=head2 behind_proxy setting

The behind_proxy setting tells Dancer that it is deployed behind a proxy,
causing it to honour the C<X_FORWARDED_PROTOCOL>, C<X_FORWARDED_HOST> etc 
env vars.


And, of course, many more improvements and bug fixes - thanks to the awesome
community.
