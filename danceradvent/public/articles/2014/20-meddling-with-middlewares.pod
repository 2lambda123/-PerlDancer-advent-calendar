=head1 Meddling with Middlewares

L<Plack> provides a useful component called a
L<Middleware|Plack::Middleware>, which wraps applications with
functionality.

You can use them to your advantage to tack on additional features and
improvements to your application.

=head2 Middleware usage

Adding middlewares can be breeze using the L<Plack::Builder> syntax:

    use MyApp;
    use Plack::Builder;

    builder {
        enable 'Auth::Basic', authenticator => sub {
            my ( $user, $pass, $env ) = @_;
            # test $user and $pass somehow
        };

        MyApp->to_app;
    };

Since C<to_app> returns an app, you can use it as the last statement
to C<builder>. In this example we add C<Plack::Middleware::Auth::Basic>
middleware to our new application stack.

We can add more:

    builder {
        enable 'Auth::Basic', authenticator => sub { ... };

        enable 'Rewrite', rules => sub {
            return 301
                if s{^/foo/?$}{/bar/}
                or s{^/baz/?$}{/quux/};

            ...
        };

        MyApp->to_app;
    };

Now having C<Plack::Middleware::Rewrite> as well. Having it before
I<Auth::Basic> will assure the rewrites will happen first. Having it
after I<Auth::Basic> will assure authentication will happen first.

=head2 Multiple Dancer applications

As explained in our C<to_app>
L<article|http://advent.perldancer.org/2014/9>, you can set up multiple
L<Dancer2> applications using the same syntax:

    use MyApp;
    use MyApp::Admin;
    use Plack::Builder;

    builder {
        mount '/'      => MyApp->to_app;
        mount '/admin' => MyApp::Admin->to_app;
    };

We can still add middlewares to that stack:

    builder {
        enable 'Rewrite', rules => sub {
            ...
        };

        mount '/'      => MyApp->to_app;
        mount '/admin' => MyApp::Admin->to_app;
    };

Not bad, but there's one more situation to cover.
 
=head2 Going nuts

Let's take a look at another situation: adding authentication using a
middleware:

    builder {
        enable 'Auth::Basic', authenticator => sub { ... };

        mount '/'      => MyApp->to_app;
        mount '/admin' => MyApp::Admin->to_app;
    };

But wait. This doesn't make sense. We want to only enable authentication
for the I<admin> application. This will set it up to both of them.

Since the Dancer application is a callback, and C<builder> wraps
callbacks by providing another callback... you might see where this is
heading:

    builder {
        mount '/'      => MyApp->to_app;
        mount '/admin' => builder {
            enable 'Auth::Basic', authenticator => sub { ... };

            MyApp::Admin->to_app;
        };
    };

Pretty cool, huh? Very!

=head2 Conclusion

Middlewares are awesome and very easy to integrate with Dancer. In fact,
we use middlewares internally in L<Dancer2>, which you will read
about in the next article.

=head2 Author

This article has been written by Sawyer X for the Perl
Dancer Advent Calendar 2014.

=head2 Copyright

No copyright retained. Enjoy.

2014 // Sawyer X C<< <xsawyerx@cpan.org> >>

