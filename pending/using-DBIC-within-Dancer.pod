=head1 Using DBIC (DBIX::Class) within a Dancer application

C<DBIX::Class>, also known as DBIC, is one of the many Perl ORM (I<Object Relational
Mapper>), but it's commonly recognized as the best and most widely used.

This is a nice presentation from Leo : L<http://www.slideshare.net/ranguard/dbixclass-beginners-presentation>

Basically, DBIC allows you to interact with your SQL Database without writing any SQL.

To do that, you need a set of B<Schema classes> that describes your database
structure. Then you can use DBIC to create, update, delete, search, and do many
more things on the data that are in your database.

From a Dancer web application, it is very easy to use DBIC, thanks to
C<Dancer::Plugin::DBIC>. This article wwill implement a simple web application to
demonstrate the use of C<Dancer::Plugin::DBIC>.

=head2 Simple example

Let's consider a simple Dancer application that allows to search for authors or
books. The application is connected to a database, that contains authors, and
their books. The website will have one single page with a form, to query books
or authors, and display the result.

To keep this article short, the HTML will be simplistic, and the implementation
will be a bit stupid. In real life you'd want to use templates, layouts, and
probably more routes. However, I'll try to explain how to properly use
Dancer::Plugin::DBIC.

=head2 The basics

=head3 Create the application

Okay, that's easy enough:

  $> dancer -a bookstore

=head3 Change template type

We'll want to loop on results and display authors and books, and it's easier to
use Template Toolkit to do that, rather than the default
C<Dancer::Template::Simple>.

So let's specify in the configuration that we'll use Template Toolkit as
template engine:

  # add in bookstore/config.yml
  template: template_toolkit

=head3 Create a view

We need a view to display the search form, and below, the results, if any. The
results will be feeded to the template engine as an C<arrayref> of results.
Each result is a I<hashref>, with a C<author> key containing the name of the
author, and a C<books> key containing an I<arrayref> of strings : the books
names.

That explanation is probably hard to follow, so here is an example, much easier:

  # example of a list of results
  [ { author => 'author 1',
      books => [ 'book 1', 'book 2' ],
    },
    { author => 'author 2',
      books => [ 'book 3', 'book 4' ],
    }
  ]

We also need a view:

  # 

Let's add a route:

  # add in bookstore/lib/bookstore.pm
  
But 

 way of writing the web application code



 It's
=head1 SEE ALSO

=head1 AUTHOR

dams: Damien Krotkine <dams@zarb.org>
