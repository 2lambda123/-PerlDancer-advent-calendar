=head1 Writing ReST webservices with Dancer

It's easy to write ReST webservices with Dancer ....

=head1 The Basics

What defines a ReST application 

=head2 Serializaters

Dancer comes with some helper functions for serializing.
Theses functions help you to serialize a Perl data structure to a JSON or XML
document.
The core provides serializers for:

=over 4

=item B<JSON>

with B<to_json> and B<from_json>.

=item B<XML>

with B<to_xml> and B<from_xml>. This serializer can be customized with ...

=item B<YAML>

with B<to_yaml> and B<from_yaml>.

=back

With these serializers, you can write:

    get '/user/:id' => sub {
        my $id = params->{id};
        my $user = $schema->resultset('Users')->find($id);
        content_type 'application/json';
        return to_json { id => $id, name => $user->name };
    };

=head2 Let Dancer handle the serialization

Now that we've seen how to do serialization manually, lets make Dancer do the
work for us.
You can configure your application to have a default serializer:

    set serializer => 'JSON';

Now, you can define a route like this:

     get '/user/:id' => sub {
         my $id = params->{id};
         my $user = $schema->resultset('Users')->find($id);
         return { id => $id, name => $user->name };
     };

As you can see, we no longer need to call the B<content_type> and B<to_json>
functions.
When you set a default serializer and your route returns an arrayref or hashref,
Dancer will check if you have a default serializer defined.
If that is the case,  it will serialize the response to the appropriate format
and set the correct content type.
     
=head1 Dancer::Plugin::Rest

Using Dancer::Plugin::REST

=head1 SEE ALSO

=head1 AUTHOR

franck: franck cuny <franck@lumberjaph.net>
