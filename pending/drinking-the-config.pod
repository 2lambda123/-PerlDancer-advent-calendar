=head1 Drinking the Config

Some of the changes L<Dancer2> has introduced were the removal of all
import tags:

    use Dancer ':syntax'; # use Dancer2;
    use Dancer ':script'; # use Dancer2;
    use Dancer ':tests';  # use Dancer2;

Now you simply call C<use Dancer2> for all of these. It will create an
application and provide keywords. If you want to create a L<PSGI>
application from it, simply call C<to_app>. Otherwise, it doesn't get
in the way.

=head2 But I need it

While the last paragraph actually summed up this entire article, it
wasn't very clear.

A useful feature of going through Dancer itself is that it will read
the configuration files, parse it, understand it, and even create objects
lazily using them.

People often write scripts that have to then duplicate what Dancer
does. It is then understandable that people wish to be able to use
Dancer in their scripts to have access to the configuration and the
generated objects.

=head2 Reaching the config

By importing L<Dancer2> in your command line scripts, you have full
access to the configuration using the imported keywords:

    # myscript.pl:
    use Dancer2; # strict && warnings included

    # this works:
    my $appname = config->{'appname'};

You shouldn't worry about F<myscript.pl> becoming an app. I mean, yes,
it will become an app, but since you're using C<to_app> to create the
PSGI applications, you will have no side-effects.

=head2 Conclusion

If you want to create command line applications that use the Dancer2
structures, you can simply load Dancer2 and use the keywords it provides
you.

It really is that simple. This entire article could be summed in the
simple example above. I'm sorry about that. :)

=head2 Author

This article has been written by Sawyer X for the Perl
Dancer Advent Calendar 2014.

=head2 Copyright

No copyright retained. Enjoy.

2014 // Sawyer X C<< <xsawyerx@cpan.org> >>

