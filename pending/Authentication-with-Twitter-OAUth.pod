=head1 Authentication with Tiwtter OAuth

In this article we'll see how to authenticate our users via Twitter's OAuth
mechanism, using L<Dancer::Plugin::Auth::Twitter>. 

This plugin is based on L<Net::Twitter> and as a bonus side-effect exports
a C<twitter> keyword to the application's namespace, allowing other
route handlers to access the whole Twitter API on behalf of the authenticated 
user.

This article will show you how to use that plugin to build a Twitter app with
Dancer.

=head2 Basic OAuth principles

Explaining how OAuth works is beyond the scope of this article, on the other
hand, you don't really need to understand the underlying logic of it to follow
what will be done in this article. All you need to understand is that
authentication with OAuth works with such a workflow:

=over 4

=item 1.

An unauthenticated user request a page on your app

=item 2.

The application requests an authentication URL from Twitter's API, providing
its C<consumer_key> and C<consumer_secret> keys as well as a C<callback URL>.
        
=item 3.

The application bounces the user to the authentication URL it has got from
Twitter.

=item 4.

The user redirected at Twitter and is prompted for allowing the application to
access her profile and do actions on her behalf.

=item 5.

When the user hits the I<Allow> button, she's redirected back to the
application, on the callback URL provided at step #2 with request token
provided by Twitter as params.

=item 6.

The user is back on the application, requesting the callback URL. The app
uses the token given as parameters (automatically set at step 5 by Twitter
redirect) and fetch the Twitter user object with a request to Twitter's API.

The application stores the user object in a session (or do whatever to
recognize the user on later requests).

=item 7

The user is authenticated and the application will recognize her.

=back

Our plugin should provide a simple way to implement this logic within a Dancer
application, all the OAuth negociation being delegated to L<Net::Twitter>.

=head2 First things first

Before starting we need to register a Twitter application so we can have our
C<consumer_key> and C<consumer_secret> keys.

Anyone can register a Twitter application at L<http://dev.twitter.com>, just
make sure it is a I<Web> application.

=head2 Configuring the plugin

First, our plugin needs a bit of configuration, as the application will need to
know these C<consumer_key> and C<consumer_secret> keys.

Each Dancer plugin can store their configuration bits inside the main app's
configuration, under C<plugins/PluginName>. PluginName being the name of the
plugin module minus the C<< Dancer::Plugin >> namespace.

So as our plugin is named C<< Dancer::Plugin::Auth::Twitter >> we'll be able to
store our configuration under C<< plugins/Auth::Twitter >> :

    # config.yml
    ....
    plugin:
      "Auth::Twitter":
        consumer_key: "abcd..."
        consumer_secret: "1234..."
        callback_url: "http://localhost:3000/auth/twitter/callback"

That's it! Our plugin is configured. We can now use it in our code.

=head3 Initialization

At the very first, we must initilaizes the plugin (basically it needs to read
the configuration and create its internal L<Net::Twitter> object. So our
application must start with something like the following:

    package MyApp;
    use Dancer;
    use Dancer::Plugin::Auth::Twitter;

    auth_twitter_init();

At this point, if your app doesn't provide all the configuration bits needed by
the plugin, it will throw an exception.

=head3 Filtering unauthenticated users

Implementing an authentication system basically relies on a before filter,
where you check if the user is authenticated, and if not, redirect her to an
authentication URL.

That is what we need to do here, and as you can see it's pretty
straight-forward:

    before sub {
        return if request->path =~ m{/auth/twitter/callback};
        if (not session('twitter_user')) {
            redirect twitter->auth_twitter_authenticate_url;
        }
    };

This filter redirects any unauthenticated user to the authentication URL.
Note that we don't want to do that redirect when the requested page is the
callback URL defined by the plugin (this route handler is responsible for
storing the authenticated user into the session).

With our filter though, all our application routes expect an authenticated Twitter
user, you could of course do something more clever to enable that filter only
for a subset of your routes, but that is left as an exercise for the reader.

=head2 Playing with Twitter

Well, at this point, we're done. Yes, it's that simple. The only work that is
left to the developer is to provide a before filter that redirect
unauthenticated user to twitter->auth_twitter_authenticate_url when
appropriate. All the dirty work of communicating with Twitter is handled under
the hood.

So now, we can play with it, let's do a "Twitter hello world":

    get "/" => sub {
        "Hello, ".session('twitter_user')->{'screen_name'};
    };

As our before filter will catch any unauthenticated user and redirect them to
Twitter if needed, it's that simple.

Note that the L<Net::Twitter> object accesible via the C<twitter> keyword
allows you all that the Twitter ReST API provides, so your possibilities are
endless.

=head2 More details

As with previous articles in this advent calendar, the plugin described here
has been uploaded to the CPAN at L<Dancer::Plugin::Auth::Twitter>.

The source code can also been accessed with GitHub at
L<http://github.com/sukria/Dancer-Plugin-Auth-Twitter/>.

For more details about the plugin, you can check the example application that
is shipped with L<Dancer::Plugin::Auth::Twitter> in the C<example/> directory. It
should be working out of.

=head2 Author

This article has been written by Alexis Sukrieh for the Perl Dancer advent
calendar 2010.

=head2 Copyright

Copyright (C) 2010 Alexis Sukrieh C<< <sukria@sukria.net> >>.

